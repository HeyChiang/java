spring:
  application:
    name: sharding-sphere
  sharding-sphere:
    datasource:
      names: db1,db2
      db1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/db1?characterEncoding=utf-8
        username: root
        password: test-2021
      db2:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/db2?characterEncoding=utf-8
        username: root
        password: test-2021
    rules:
      sharding:
        default-database-strategy:
          standard:
            sharding-algorithm-name: database-inline
            sharding-column: user_id
        tables:
          # 定义逻辑表表明
          order:
            # 实际要操作的数据库和表节点
            actual-data-nodes: db$->{1..2}.t_order_$->{0..1}
            key-generate-strategy:
              # 引入 key-generators定义的snowflake变量，大小写要一致，否则报错：Can not find keyGenerator `SNOWFLAKE` in database `logic_db`.
              key-generator-name: snowflake
              # 哪一列需要使用分片
              column: id
            # 定义表分片的算法策略
            table-strategy:
              standard:
                sharding-column: id
                sharding-algorithm-name: t-order-inline
          order_item:
            # 实际要操作的数据库和表节点
            actual-data-nodes: db$->{1..2}.t_order_item_$->{0..1}
            key-generate-strategy:
              # 引入 key-generators定义的snowflake变量，大小写要一致，否则报错：Can not find keyGenerator `SNOWFLAKE` in database `logic_db`.
              key-generator-name: snowflake
              # 哪一列需要使用分片
              column: order_id
            # 定义表分片的算法策略
            table-strategy:
              standard:
                sharding-column: order_id
                sharding-algorithm-name: t-order-item-inline
        sharding-algorithms:
          # 定义一个分片算法名
          database-inline:
            type: INLINE
            props:
              algorithm-expression: db$->{user_id % 2+1}
          t-order-inline:
            type: INLINE
            props:
              algorithm-expression: t_order_$->{id % 2}
          t-order-item-inline:
            type: INLINE
            props:
              algorithm-expression: t_order_item_$->{order_id % 2}
        key-generators:
          # 定义id生成的方式使用雪花算法，变量名为：snowflake
          snowflake:
            type: SNOWFLAKE
        binding-tables:
          - order,order_item
    props:
      sql-show: true
    mode:
      # 设置单机模式
      type: Standalone
      overwrite: true

